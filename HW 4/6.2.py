import numpy as np

classifiers = np.array([
    [+1, -1, -1, +1, +1, +1, -1, -1, -1, +1, +1, -1, -1, -1, -1, +1, +1, +1, +1, +1, -1, -1, -1, -1, -1, +1, +1, +1, -1, +1],
    [+1, -1, +1, -1, -1, +1, -1, +1, +1, +1, +1, +1, +1, +1, -1, +1, -1, +1, +1, +1, +1, +1, +1, -1, -1, +1, +1, +1, +1, +1],
    [+1, +1, +1, +1, +1, -1, +1, -1, +1, +1, +1, -1, -1, +1, -1, +1, +1, -1, -1, -1, -1, -1, -1, -1, -1, +1, -1, -1, -1, -1],
    [+1, +1, -1, +1, +1, +1, +1, +1, +1, +1, -1, -1, -1, -1, +1, +1, +1, +1, +1, +1, -1, +1, +1, +1, -1, -1, +1, +1, +1, +1],
    [-1, +1, +1, +1, -1, +1, -1, +1, -1, -1, -1, -1, -1, -1, -1, -1, +1, -1, +1, +1, -1, -1, +1, -1, -1, +1, -1, -1, -1, +1],
    [+1, -1, -1, +1, -1, -1, -1, -1, -1, +1, +1, +1, +1, -1, +1, -1, +1, +1, -1, +1, -1, -1, -1, -1, +1, +1, -1, +1, -1, +1],
    [+1, -1, +1, +1, -1, -1, -1, +1, +1, -1, +1, -1, -1, -1, +1, -1, -1, -1, +1, -1, +1, +1, -1, -1, +1, -1, -1, -1, -1, +1],
    [-1, +1, +1, -1, +1, +1, +1, -1, +1, -1, +1, -1, -1, -1, -1, +1, -1, -1, +1, -1, -1, -1, -1, +1, +1, +1, +1, -1, -1, +1],
    [-1, +1, -1, +1, -1, +1, +1, -1, +1, +1, -1, +1, -1, -1, +1, -1, -1, +1, +1, -1, -1, -1, -1, +1, -1, -1, -1, -1, +1, +1],
    [+1, -1, +1, +1, +1, -1, +1, -1, -1, -1, -1, -1, +1, -1, +1, -1, -1, +1, -1, -1, -1, +1, +1, +1, +1, -1, +1, +1, -1, -1],
    [+1, -1, -1, -1, +1, -1, -1, -1, +1, -1, +1, -1, -1, -1, +1, -1, -1, -1, +1, +1, -1, +1, +1, +1, +1, -1, +1, +1, -1, -1],
    [+1, +1, -1, -1, -1, +1, -1, +1, -1, +1, +1, -1, -1, +1, -1, -1, -1, -1, -1, +1, +1, -1, -1, -1, +1, +1, +1, -1, +1, +1],
    [-1, +1, +1, -1, -1, -1, +1, +1, +1, -1, -1, +1, +1, +1, +1, -1, -1, +1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, +1, +1],
    [+1, +1, -1, +1, -1, +1, +1, +1, +1, -1, +1, -1, -1, +1, -1, -1, +1, -1, +1, +1, -1, -1, +1, -1, -1, +1, +1, +1, +1, +1],
    [-1, +1, -1, -1, -1, +1, +1, +1, -1, -1, +1, -1, -1, -1, +1, +1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, +1, -1, -1],
    [+1, -1, +1, -1, +1, +1, -1, +1, +1, -1, +1, +1, +1, +1, -1, +1, +1, +1, -1, -1, +1, -1, -1, -1, +1, -1, +1, -1, +1, +1],
    [+1, -1, -1, -1, -1, -1, +1, -1, +1, -1, +1, +1, -1, -1, -1, +1, -1, +1, -1, +1, -1, -1, +1, -1, +1, -1, +1, -1, -1, -1],
    [-1, -1, +1, -1, -1, +1, -1, +1, +1, -1, -1, -1, +1, +1, +1, -1, +1, +1, -1, -1, +1, -1, -1, -1, -1, -1, +1, +1, +1, +1],
    [-1, -1, -1, -1, -1, -1, -1, -1, -1, +1, -1, -1, +1, +1, -1, +1, -1, +1, -1, -1, -1, -1, +1, +1, +1, +1, +1, -1, +1, +1],
    [-1, +1, -1, +1, -1, +1, +1, +1, +1, -1, -1, +1, +1, +1, -1, -1, -1, -1, +1, +1, -1, +1, -1, -1, -1, -1, -1, +1, +1, +1],
    [+1, -1, -1, +1, +1, +1, -1, -1, -1, +1, -1, +1, -1, -1, -1, -1, -1, +1, -1, +1, +1, -1, +1, +1, -1, -1, -1, -1, +1, -1],
    [-1, +1, -1, +1, +1, -1, -1, +1, +1, +1, -1, -1, +1, -1, +1, -1, +1, -1, +1, -1, -1, -1, +1, +1, +1, -1, -1, -1, +1, -1],
    [+1, -1, +1, +1, +1, -1, +1, +1, +1, -1, -1, -1, -1, +1, -1, -1, -1, -1, +1, +1, -1, -1, +1, -1, +1, -1, +1, -1, -1, -1],
    [+1, -1, +1, +1, +1, -1, +1, +1, +1, +1, +1, -1, -1, -1, -1, +1, +1, +1, +1, -1, +1, +1, +1, +1, -1, -1, -1, +1, +1, +1],
    [+1, +1, +1, -1, -1, -1, -1, -1, -1, +1, +1, -1, +1, +1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, +1, +1, +1, +1]])
labels = np.array([-1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1, +1, -1])

num_data = len(labels)
num_classifiers = classifiers.shape[1]

C = np.zeros(num_data)
u = np.zeros(num_classifiers)
results = []

for m in range(num_classifiers):
    w = np.exp(-labels * C)
    W = w.sum()
    W2 = float('inf')
    t = None

    for j in range(num_classifiers):
        if u[j] == 0:
            Y = 0
            for i in range(num_data):
                if classifiers[i][j] != labels[i]:
                    Y += w[i]
            if Y < W2:
                W2 = Y
                t = j

    km = classifiers[:, t]
    u[t] = 1
    r = W2 / W
    a = 0.5 * np.log((1 - r) / r)
    C += a * km

    results.append(C.copy())

print("Z[i]\t", end='')
for i in range(1, num_classifiers + 1):
    print(f"C[{i}]\t", end='')
print()

for i, label in enumerate(labels):
    print(label, end="\t")
    for j in range(num_classifiers):
        print(f"{label * results[j][i]:.6f}\t", end='')
    print()

hits = []
for j in range(num_classifiers):
    hits.append(sum([1 for i in range(num_data) if labels[i] * results[j][i] >= 0]))

print("numHits\t", end='')
for hit in hits:
    print(f"{hit}\t", end='')

print("\nMinimum Iteration is C[21].\t", end='')